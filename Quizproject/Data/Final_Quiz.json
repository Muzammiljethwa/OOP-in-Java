{
  "Quiz": [
    {
      "Options": [
        " Parent of an object ",
        " Instance of an object ",
        " Blueprint of an object ",
        " Scope of an object "
      ],
      "TrueIndex": 2,
      "Explanation": "Explanation: A class is Blueprint of an object which describes/ shows all the functions and data that are provided by an object of a specific class. It can’t be called as parent or instance of an object. Class in general describes all the properties of an object.",
      "Question": "<html> Which of the following best defines a class? </html>",
      "id": 1
    },
    {
      "Options": [
        " Alan Kay ",
        " Andrea Ferro ",
        " Dennis Ritchie ",
        " Adele Goldberg "
      ],
      "TrueIndex": 0,
      "Explanation": "Explanation: Alan Kay invented OOP, Andrea Ferro was a part of SmallTalk Development. Dennis invented C++ and Adele Goldberg was in team to develop SmallTalk but Alan actually had got rewarded for OOP.",
      "Question": "<html> Who invented OOP? </html>",
      "id": 2
    },
    {
      "Options": [
        " Data members ",
        " Member functions ",
        " Static data allowed ",
        " Public access specifier "
      ],
      "TrueIndex": 1,
      "Explanation": "Explanation: Member functions are allowed inside a class but were not present in structure concept.  Data members, static data and public access specifiers were present in structures too.",
      "Question": "<html> What is the additional feature in classes that was not in structures? </html>",
      "id": 3
    },
    {
      "Options": [
        " Code reusability ",
        " Modularity ",
        " Duplicate/Redundant data ",
        " Efficient Code "
      ],
      "TrueIndex": 2,
      "Explanation": "Explanation: Duplicate/Redundant data is dependent on programmer and hence can’t be guaranteed by OOP. Code reusability is done using inheritance. Modularity is supported by using different code files and classes. Codes are more efficient because of features of OOP.",
      "Question": "<html> Which is not feature of OOP in general definitions? </html>",
      "id": 4
    },
    {
      "Options": [
        " Polymorphism ",
        " Abstraction ",
        " Encapsulation ",
        " Inheritance "
      ],
      "TrueIndex": 3,
      "Explanation": "Explanation: Using inheritance we can reuse the code already written and also can avoid creation of many new functions or variables, as that can be done one time and be reused, using classes.",
      "Question": "<html> Which Feature of OOP illustrated the code reusability? </html>",
      "id": 5
    },
    {
      "Options": [
        " C++ ",
        " Java ",
        " Kotlin ",
        " Small Talk "
      ],
      "TrueIndex": 1,
      "Explanation": "Explanation: Java doesn’t support all 4 types of inheritance. It doesn’t support multiple inheritance. But the multiple inheritance can be implemented using interfaces in Java.",
      "Question": "<html> Which language does not support all 4 types of inheritance? </html>",
      "id": 6
    },
    {
      "Options": [
        " Only 1 ",
        " Only 100 ",
        " Only 999 ",
        " As many as you want "
      ],
      "TrueIndex": 3,
      "Explanation": "Explanation: Any number of classes can be defined inside a program, provided that their names are different. In java, if public class is present then it must have the same name as that of file.",
      "Question": "<html> How many classes can be defined in a single program? </html>",
      "id": 7
    },
    {
      "Options": [
        " 1970â€™s ",
        " 1980â€™s ",
        " 1993 ",
        " 1995 "
      ],
      "TrueIndex": 0,
      "Explanation": "Explanation: OOP first came into picture in 1970’s by Alan and his team. Later it was used by some programming languages and got implemented successfully, SmallTalk was first language to use pure OOP and followed all rules strictly.",
      "Question": "<html> When OOP concept did first came into picture? </html>",
      "id": 8
    },
    {
      "Options": [
        " It supports usual declaration of primitive data types ",
        " It doesnâ€™t support all types of inheritance ",
        " It allows code to be written outside classes ",
        " It does not support pointers "
      ],
      "TrueIndex": 0,
      "Explanation": "Explanation: As Java supports usual declaration of data variables, it is partial implementation of OOP. Because according to rules of OOP, object constructors must be used, even for declaration of variables.",
      "Question": "<html> Why Java is Partially OOP language? </html>",
      "id": 9
    },
    {
      "Options": [
        " Code can be written without using classes ",
        " Code must contain at least one class ",
        " A class must have member functions ",
        " At least one object should be declared in code "
      ],
      "TrueIndex": 1,
      "Explanation": "Explanation: In C++, it’s not necessary to use classes, and hence codes can be written without using OOP concept. Classes may or may not contain member functions, so it’s not a necessary condition in C++. And, an object can only be declared in a code if its class is defined/included via header file.",
      "Question": "<html> Which concept of OOP is false for C++? </html>",
      "id": 10
    },
    {
      "Options": [
        " iostream.h ",
        " stdio.h ",
        " stdlib.h ",
        " OOP can be used without using any header file "
      ],
      "TrueIndex": 3,
      "Explanation": "Explanation: We need not include any specific header file to use OOP concept in C++, only specific functions used in code need their respective header files to be included or classes should be defined if needed.",
      "Question": "<html> Which header file is required in C++ to use OOP? </html>",
      "id": 11
    },
    {
      "Options": [
        " Inheritance and Encapsulation ",
        " Encapsulation and Polymorphism ",
        " Encapsulation and Abstraction ",
        " Abstraction and Polymorphism "
      ],
      "TrueIndex": 2,
      "Explanation": "Explanation: Encapsulation and Abstraction are similar features. Encapsulation is actually binding all the properties in a single class or we can say hiding all the features of object inside a class. And Abstraction is hiding unwanted data (for user) and showing only the data required by the user of program.",
      "Question": "<html> Which of the two features match each other? </html>",
      "id": 12
    },
    {
      "Options": [
        " Use of this pointer ",
        " Use of pointers ",
        " Use of pass by value ",
        " Use of parameterized constructor "
      ],
      "TrueIndex": 0,
      "Explanation": "Explanation: Use of this pointer allows an object to call data and methods of itself whenever needed. This helps us call the members of an object recursively, and differentiate the variables of different scopes.",
      "Question": "<html> Which feature allows open recursion, among the following? </html>",
      "id": 13
    },
    {
      "Options": [
        " Abstract Class ",
        " Final Class ",
        " Start Class ",
        " String Class "
      ],
      "TrueIndex": 2,
      "Explanation": "Explanation: Only 9 types of classes are provided in general, namely, abstract, final, mutable, wrapper, anonymous, input-output, string, system, network. We may further divide the classes into parent class and subclass if inheritance is used.",
      "Question": "<html> Which of the following is not type of class? </html>",
      "id": 14
    },
    {
      "Options": [
        " Abstract class ",
        " Final class ",
        " Template class ",
        " Efficient Code "
      ],
      "TrueIndex": 2,
      "Explanation": "Explanation: Template classes are known to be generic classes because those can be used for any data type value and the same class can be used for all the variables of different data types.",
      "Question": "<html> Which is known as a generic class? </html>",
      "id": 15
    },
    {
      "Options": [
        " Sum of the size of all the variables declared inside the class ",
        " Sum of the size of all the variables along with inherited variables in the class ",
        " Size of the largest size of variable ",
        " Classes doesnâ€™t have any size "
      ],
      "TrueIndex": 3,
      "Explanation": "Explanation: Classes doesn’t have any size, actually the size of object of the class can be defined. That is done only when an object is created and its constructor is called.",
      "Question": "<html> Size of a class is _____________ </html>",
      "id": 16
    },
    {
      "Options": [
        " Default class ",
        " String class ",
        " Template class ",
        " Abstract class "
      ],
      "TrueIndex": 3,
      "Explanation": "Explanation: Abstract classes can have member functions with no implementation, where the inheriting subclasses must implement those functions.",
      "Question": "<html>Which class can have member functions without their implementation?</html>",
      "id": 17
    },
    {
      "Options": [
        " Friend class can access all the private members of the class, of which it is a friend ",
        " Friend class can only access protected members of the class, of which it is a friend ",
        " Friend class do not have any implementation ",
        " Friend class can not access any data member of another class but can use itâ€™s methods "
      ],
      "TrueIndex": 0,
      "Explanation": "Explanation: A friend class can access all the private members of another class, of which it is a friend. It is a special class provided to use when you need to reuse the data of a class but don’t want that class to have those special functions.",
      "Question": "<html> Which of the following describes a friend class? </html>",
      "id": 18
    },
    {
      "Options": [
        " Protected scope ",
        " Private scope ",
        " Global scope ",
        " Depends on access specifier and inheritance used "
      ],
      "TrueIndex": 3,
      "Explanation": "Explanation: It depends on the access specifier and the type of inheritance used with the class, because if the class is inherited then the nested class can be used by subclass too, provided it’s not of private type.",
      "Question": "<html> What is the scope of a class nested inside another class? </html>",
      "id": 19
    },
    {
      "Options": [
        " All member functions must be defined ",
        " Member functions can be defined inside or outside the class body ",
        " Member functions need not be declared inside the class definition ",
        " Member functions can be made friend to another class using the friend keyword "
      ],
      "TrueIndex": 2,
      "Explanation": "Explanation: Member functions must be declared inside class body, though the definition can be given outside the class body. There is no way to declare the member functions outside the class.",
      "Question": "<html> Which among the following is false, for a member function of a class? </html>",
      "id": 20
    },
    {
      "Options": [
        " class student{ }; ",
        " student class{ }; ",
        " class student{ public: student(int a){ } }; ",
        " class student{ student(int a){} }; "
      ],
      "TrueIndex": 1,
      "Explanation": "Explanation: Keyword class should come first. Class name should come after keyword class. Parameterized constructor definition depends on programmer so it can be left empty also. ",
      "Question": "<html> Which syntax for class definition is wrong? </html>",
      "id": 21
    },
    {
      "Options": [
        " Class and object ",
        " Class and structure ",
        " Structure and object ",
        " Structure and functions "
      ],
      "TrueIndex": 1,
      "Explanation": "Explanation: Class and structure are similar to each other. Only major difference is that a structure doesn’t have member functions whereas the class can have both data members and member functions.",
      "Question": "<html> Which of the following pairs are similar? </html>",
      "id": 22
    },
    {
      "Options": [
        " Classes may/may not have both data members and member functions ",
        " Class definition must be ended with a colon ",
        " Class can have only member functions with no data members ",
        " Class is similar to union and structures "
      ],
      "TrueIndex": 1,
      "Explanation": "Explanation: Class definition must end with a semicolon, not colon. Class can have only member functions in its body with no data members.",
      "Question": "<html> Which among the following is false for class features? </html>",
      "id": 23
    },
    {
      "Options": [
        " Anonymous class ",
        " Nested class ",
        " Parent class ",
        " Abstract class "
      ],
      "TrueIndex": 3,
      "Explanation": "Explanation: Instance of abstract class can’t be created as it will not have any constructor of its own, hence while creating an instance of class, it can’t initialize the object members. Actually the class inheriting the abstract class can have its instance because it will have implementation of all members.",
      "Question": "<html> Instance of which type of class cannot be created? </html>",
      "id": 24
    },
    {
      "Options": [
        " Instance of a class ",
        " Instance of itself ",
        " Child of a class ",
        " Overview of a class "
      ],
      "TrueIndex": 0,
      "Explanation": "Explanation: An object is instance of its class. It can be declared in the same way that a variable is declared, only thing is you have to use class name as the data type. ",
      "Question": "<html> Which definition best describes an object? </html>",
      "id": 25
    },
    {
      "Options": [
        " 32768 ",
        " 127 ",
        " 1 ",
        " As many as you want "
      ],
      "TrueIndex": 3,
      "Explanation": "Explanation: You can create as many objects of a specific class as you want, provided enough memory is available. ",
      "Question": "<html> How many objects can be declared of a specific class in a single program? </html>",
      "id": 26
    },
    {
      "Options": [
        " Object must be created before using members of a class ",
        " Memory for an object is allocated only after its constructor is called ",
        " Objects canâ€™t be passed by reference ",
        " Objects size depends on its class data members "
      ],
      "TrueIndex": 2,
      "Explanation": "Explanation: Objects can be passed by reference. Objects can be passed by value also. If the object of a class is not created, we can’t use members of that class.",
      "Question": "<html> Which among the following is false? </html>",
      "id": 27
    },
    {
      "Options": [
        " class student{ }s; ",
        " class student{ }; student s; ",
        " class student{ }s[]; ",
        " class student{ }; student s[5]; "
      ],
      "TrueIndex": 2,
      "Explanation": "Explanation: The array must be specified with a size. You can’t declare object array, or any other linear array without specifying its size. It’s a mandatory field.",
      "Question": "<html> Which of the following is incorrect? </html>",
      "id": 28
    },
    {
      "Options": [
        " Passed by reference ",
        " Passed by value ",
        " Passed by copy ",
        " Passed as function "
      ],
      "TrueIndex": 3,
      "Explanation": "Explanation: Object can’t be passed as function as it is an instance of some class, it’s not a function. Object can be passed by reference, value or copy. There is no term defined as pass as function for objects.",
      "Question": "<html> The object cannot be __________ </html>",
      "id": 29
    },
    {
      "Options": [
        " Using dot operator/period symbol ",
        " Using scope resolution operator ",
        " Using member names directly ",
        " Using pointer only "
      ],
      "TrueIndex": 0,
      "Explanation": "Explanation: Using dot operator after the name of object we can access its members. It is not necessary to use the pointers. We can’t use the names directly because it may be used outside the class.",
      "Question": "<html> How members of an object are accessed? </html>",
      "id": 30
    },
    {
      "Options": [
        " class student{ }; student s; ",
        " abstract class student{ }; student s; ",
        " abstract class student{ }s[50000000]; ",
        " abstract class student{ }; class toppers: public student{ }; topper t; "
      ],
      "TrueIndex": 1,
      "Explanation": "Explanation: We can never create instance of an abstract class. Abstract classes doesn’t have constructors and hence when an instance is created there is no facility to initialize its members. Option d is correct because topper class is inheriting the base abstract class student, and hence topper class object can be created easily. ",
      "Question": "<html> Which among the following is wrong? </html>",
      "id": 31
    },
    {
      "Options": [
        " Can be used by any other function ",
        " Can be used by main() function of any other program ",
        " Canâ€™t be used by any other function ",
        " Can be accessed using scope resolution operator "
      ],
      "TrueIndex": 2,
      "Explanation": "Explanation: The object declared in main() have local scope inside main() function only. It can’t be used outside main() function. Scope resolution operator is used to access globally declared variables/objects.",
      "Question": "<html> Object declared in main() function _____________ </html>",
      "id": 32
    },
    {
      "Options": [
        " Encapsulation ",
        " Inheritance ",
        " Abstraction ",
        " Polymorphism "
      ],
      "TrueIndex": 1,
      "Explanation": "Explanation: Inheritance indicates the code reusability. Encapsulation and abstraction are meant to hide/group data into one element. Polymorphism is to indicate different tasks performed by a single entity.",
      "Question": "<html> Which feature of OOP indicates code reusability? </html>",
      "id": 33
    },
    {
      "Options": [
        " Encapsulation ",
        " Inheritance ",
        " Polymorphism ",
        " Abstraction "
      ],
      "TrueIndex": 2,
      "Explanation": "Explanation: For the feature given above, the OOP feature used is Polymorphism. Example of polymorphism in real life is a kid, who can be a student, a son, a brother depending on where he is.",
      "Question": "<html> If a function can perform more than 1 type of tasks, where the function name remains same, which feature of OOP is used here?</html> </html>",
      "id": 34
    },
    {
      "Options": [
        " Inheritance ",
        " Polymorphism ",
        " Abstraction ",
        " Encapsulation "
      ],
      "TrueIndex": 3,
      "Explanation": "Explanation: It is Encapsulation, which groups different properties and functions of a real world entity into single element. Abstraction, on other hand, is hiding of functional or exact working of codes and showing only the things which are required by the user.",
      "Question": "<html> If different properties and functions of a real world entity is grouped or embedded into a single element, what is it called in OOP language?</html </html>",
      "id": 35
    },
    {
      "Options": [
        " Classes must be used ",
        " Inheritance ",
        " Data may/may not be declared using object ",
        " Functions Overloading "
      ],
      "TrueIndex": 2,
      "Explanation": "Explanation: Data must be declared using objects. Object usage is mandatory because it in turn calls its constructors, which in turn must have a class defined. If object is not used, it is a violation of pure OOP concept.",
      "Question": "<html> Which of the following is not a feature of pure OOP? </html>",
      "id": 36
    },
    {
      "Options": [
        " Platform independent ",
        " Data binding ",
        " Message passing ",
        " Data hiding "
      ],
      "TrueIndex": 0,
      "Explanation": "Explanation: Platform independence is not feature of OOP. C++ supports OOP but it’s not a platform independent language. Platform independence depends on programming language.",
      "Question": "<html> Which among the following doesnot come under OOP concept? </html>",
      "id": 37
    },
    {
      "Options": [
        " Inheritance canâ€™t be implemented ",
        " Object must be used is violated ",
        " Encapsulation only is violated ",
        " Basically all the features of OOP gets violated "
      ],
      "TrueIndex": 3,
      "Explanation": "Explanation: All the features are violated because Inheritance and Encapsulation won’t be implemented. Polymorphism and Abstraction are still possible in some cases, but the main features like data binding, object use and etc won’t be used hence the use of class is must for OOP concept.",
      "Question": "<html> Which feature may be violated if we donot use classes in a program? </html>",
      "id": 38
    },
    {
      "Options": [
        " 7 ",
        " 6 ",
        " 5 ",
        " 4 "
      ],
      "TrueIndex": 0,
      "Explanation": "Explanation: There are 7 basic features that define whether a programing language is pure OOP or not. The 4 basic features are inheritance, polymorphism, encapsulation and abstraction. Further, one is, object use is must, secondly, message passing and lastly, Dynamic binding.",
      "Question": "<html> How many basic features of OOP are required for a programming language to be purely OOP?</html> </html>",
      "id": 39
    },
    {
      "Options": [
        " Data transfer ",
        " Data Binding ",
        " Message Passing ",
        " Message reading "
      ],
      "TrueIndex": 2,
      "Explanation": "Explanation: The interaction between two object is called the message passing feature. Data transfer is not a feature of OOP. Also, message reading is not a feature of OOP.",
      "Question": "<html>The feature by which one object can interact with another object is ________</html>",
      "id": 40
    },
    {
      "Options": [
        " Nested class ",
        " Enclosing class ",
        " Inline function ",
        " Virtual Functions "
      ],
      "TrueIndex": 3,
      "Explanation": "Explanation: Virtual Functions can be defined in any class using the keyword virtual. All the classes which inherit the class containing the virtual function, define the virtual function as required. Redefining the function on all the derived classes according to class and use represents polymorphism.",
      "Question": "<html> ___________ underlines the feature of Polymorphism in a class</html>",
      "id": 41
    },
    {
      "Options": [
        " Operator Overloading ",
        " Function Overloading ",
        " Operator Overriding ",
        " Function Overriding "
      ],
      "TrueIndex": 0,
      "Explanation": "Explanation: The feature is operator overloading. There is not a feature named operator overriding specifically. Function overloading and overriding doesn’t give addition function to any operator.",
      "Question": "<html>Which feature in OOP is used to allocate additional function to a predefined operator in any language?</html> </html>",
      "id": 42
    },
    {
      "Options": [
        " Function overloading ",
        " Function overriding ",
        " Operator overloading ",
        " Operator Overriding "
      ],
      "TrueIndex": 1,
      "Explanation": "Explanation: Function overriding doesn’t illustrate polymorphism because the functions are actually different and theirs scopes are different. Function and operator overloading illustrate proper polymorphism. Virtual functions show polymorphism because all the classes which inherit virtual function, define the same function in different ways.",
      "Question": "<html> Which among doesnot illustrates polymorphism? </html>",
      "id": 43
    },
    {
      "Options": [
        " The language should follow 3 or more features of OOP ",
        " The language should follow at least 1 feature of OOP ",
        " The language must follow only 3 features of OOP ",
        " The language must follow all the rules of OOP "
      ],
      "TrueIndex": 3,
      "Explanation": "Explanation: The language must follow all the rules of OOP to be called a purely OOP language. Even if a single OOP feature is not followed, then it’s known to be a partially OOP language.",
      "Question": "<html> Which among the following, for a pure OOP language, is true? </html>",
      "id": 44
    },
    {
      "Options": [
        " Always true for any programming language ",
        " May not be true with respect to all programming languages ",
        " It depends on type of program ",
        " All of these "
      ],
      "TrueIndex": 0,
      "Explanation": "Explanation: It is always true as we have the facility of private and protected access specifiers. Also, only the public and global data are available globally or else the program should have proper permission to access the private data.",
      "Question": "<html> Does OOP provide better security than POP? </html>",
      "id": 45
    }
  ]
}