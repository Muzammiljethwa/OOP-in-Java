/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package quizproject;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIDefaults;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author mzjet
 */
public class resutTableDownloadable extends javax.swing.JFrame {
    
    
    String email;
    
    public void setemail(String Email){
        email = Email;
    }
    public String getemail(){
        return email;
    }

    /**
     * Creates new form resutTableDownloadable
     */
    public resutTableDownloadable(String email) {
        setemail(email);
        initComponents();
        setTitle("Result");
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        jLabel1.setText("Result Sheet");

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        try{
            // my code
            JSONParser parser = new JSONParser();

            Object obj = parser.parse(new FileReader("./Data/QuizScore.json"));

            JSONArray student = (JSONArray) obj;

            Object[] array = student.toArray();

            Object[][] mainData = new Object[array.length][7];

            for(int i=0; i<array.length; i++){

                JSONObject StudentObject = (JSONObject) array[i];

                mainData[i][0] = StudentObject.get("SeatNumber");
                mainData[i][1] = StudentObject.get("Name");
                mainData[i][6] = StudentObject.get("SeatNumber");

                if(StudentObject.get("Score").equals("")){

                    mainData[i][2] = "Not Submitted";
                    mainData[i][3] ="NA";
                    mainData[i][4] = "NA";
                    mainData[i][5] = "Fail";

                }
                else{

                    mainData[i][2] = "Submitted";
                    mainData[i][3] = StudentObject.get("Score");

                    int getScore = Integer.parseInt( StudentObject.get("Score").toString().split("/")[0] );
                    int totalScore = Integer.parseInt( StudentObject.get("Score").toString().split("/")[1] );

                    double percentage = (getScore * 100 )/ totalScore;
                    mainData[i][4] = percentage + "%";

                    if(percentage>=50.00){mainData[i][5] = "Pass";}
                    else{mainData[i][5] = "Fail";}

                }

            }

            String[] columnNames = {"Seat Number","Names", "Quiz","Score","Percentage%","Result","Quiz Sheet"};

            TableModel tableModel = new DefaultTableModel(mainData, columnNames);
            table.setModel( tableModel
            );
            table.getColumn("Quiz Sheet").setCellRenderer(new ButtonRenderer());
            table.getColumn("Quiz Sheet").setCellEditor(
                new ButtonEditor(new JCheckBox(),getemail()));

            UIDefaults defaults = UIManager.getLookAndFeelDefaults();
            if (defaults.get("Table.alternateRowColor") == null)
            defaults.put("Table.alternateRowColor", new Color(240, 240, 240));

            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment( JLabel.CENTER );

            table.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
            table.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
            table.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );

            table.setFont(new Font("Tahome",Font.PLAIN,15));
            int height = table.getRowHeight();
            table.setRowHeight(height+10);

            JTableHeader Theader = table.getTableHeader();
            Theader.setFont(new Font("Tahome",Font.BOLD,20) );
            Theader.setBackground(Color.decode("#000066"));
            Theader.setForeground(Color.BLACK);

            table.getTableHeader().setBackground(Color.BLACK);

            TableCellRenderer rendererFromHeader = table.getTableHeader().getDefaultRenderer();
            JLabel headerLabel = (JLabel) rendererFromHeader;
            headerLabel.setHorizontalAlignment(JLabel.CENTER);

            table.setFont(new Font("Tahome",Font.PLAIN,15));
            //    int height = table.getRowHeight();
            table.setRowHeight(height+10);

            // Color Column of Quiz Submitted
            int column_index = 2;

            table.getColumnModel().getColumn(column_index).setCellRenderer(new DefaultTableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                    String submittedValue =table.getValueAt(row, column_index).toString();

                    if (submittedValue.equals("Submitted")) {

                        c.setForeground(Color.decode("#3366ff"));
                        c.setFont(new Font("Tahome",Font.BOLD,15));

                        //                    c.setBackground(Color.RED);
                        //                    c.setForeground(Color.WHITE);
                    }
                    else {
                        //                    c.setBackground(Color.RED);
                        c.setForeground(Color.RED);
                        //                    c.setFont(new Font("Tahome",Font.BOLD,15));
                    }

                    //                int rendererWidth = c.getPreferredSize().width;
                    //                    TableColumn tableColumn = table.getColumnModel().getColumn(column);
                    //                    tableColumn.setPreferredWidth( Math.max(rendererWidth + table.getIntercellSpacing().width,tableColumn.getPreferredWidth()));
                    //
                    //                DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
                    //                rightRenderer.setHorizontalAlignment(JLabel.CENTER);
                    //                table.getColumnModel().getColumn(column).setCellRenderer(rightRenderer);

                    return c;
                }

            });

            // Color Column of Result
            int column_index2 = 5;
            table.getColumnModel().getColumn(column_index2).setCellRenderer(new DefaultTableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                    String submittedValue = table.getValueAt(row, column_index2).toString();

                    if (submittedValue.equals("Fail")) {
                        //
                        c.setBackground(Color.decode("#ff3333"));
                        c.setForeground(Color.WHITE);
                        c.setFont(new Font("Tahome",Font.PLAIN,15));
                    }
                    else {
                        c.setBackground(Color.decode("#4dff4d"));
                        c.setForeground(Color.BLACK);
                        c.setFont(new Font("Tahome",Font.PLAIN,15));
                    }
                    return c;
                }
            });

            // End Color Column

            //        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            //        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
            //
            //        String[] columnNames = {"Seat Number","Names", "Quiz","Score","Percentage%","Result","Quiz Sheet"};
            //
            //        for(int x=0;x<columnNames.length;x++){
                //           table.getColumnModel().getColumn(x).setCellRenderer( centerRenderer );
                //        }

        }catch(Exception e){e.printStackTrace();};
        jScrollPane1.setViewportView(table);

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setText("Download");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(415, 415, 415))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(598, 598, 598)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed


        // TODO add your handling code here:
        
        JFileChooser filechooser = new JFileChooser();
        filechooser.setDialogTitle("Specify to save file");
        
        int userSelection = filechooser.showSaveDialog(this);
        if(userSelection == JFileChooser.APPROVE_OPTION){
            File filetosave = filechooser.getSelectedFile();
            
            try{
                FileWriter fw = new FileWriter(filetosave+".csv");
                BufferedWriter bw = new BufferedWriter(fw);
//                {"Seat Number","Names", "Quiz","Score","Percentage%","Result","Quiz Sheet"}
                bw.write("Seat Number, Names, Quiz, Score, Percentage%, Result");
                bw.newLine();
                for(int i=0; i< table.getRowCount()-1; i++){
                    for(int j=0; j< table.getColumnCount()-1; j++){
                        bw.write(table.getValueAt(i, j).toString()+",");
                    }
                    bw.newLine();
                }
                JOptionPane.showMessageDialog(this, "SUCCESSFULLY LOADED","INFORMATION",JOptionPane.INFORMATION_MESSAGE);
                bw.close();
                fw.close();
            }catch(Exception e){e.printStackTrace();};
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(resutTableDownloadable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(resutTableDownloadable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(resutTableDownloadable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(resutTableDownloadable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new resutTableDownloadable("a@a.com").setVisible(true);
            }
        });
    }
   
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}

class ButtonRenderer extends JButton implements TableCellRenderer {

 public String checkMessage(String seatNumber)throws Exception{
       
        JSONParser parser = new JSONParser();

        Object obj = parser.parse(new FileReader("./Data/QuizScore.json"));

        JSONArray student = (JSONArray) obj;

        Object[] array = student.toArray();
        JSONArray msg = new JSONArray();
        
        for(int i=0; i<array.length; i++){

            JSONObject StudentObject = (JSONObject) array[i];
            if(StudentObject.get("SeatNumber").equals(seatNumber)){
                 msg = (JSONArray) StudentObject.get("Messages");
            }    
        }
        
        Object[] msgLi = msg.toArray();
        
//        for(Object i: msgLi){
//            System.out.println(i);}
        
        
        if(msgLi.length == 0){ return "false"; }
        else{ return "true"; }
    }
 
  public ButtonRenderer() {
    setOpaque(true);
  }

  public Component getTableCellRendererComponent(JTable table, Object value,
      boolean isSelected, boolean hasFocus, int row, int column) {
    if (isSelected) {
      setForeground(table.getSelectionForeground());
      setBackground(table.getSelectionBackground());
    } else {
        try{
//            System.out.println(checkMessage(value.toString()));
        if(checkMessage(value.toString()).equals("true") ){
            setForeground(table.getForeground());
            setBackground(Color.decode("#ccff66"));
        }
        else{
//        Color.decode("#4dff4d")
      setForeground(table.getForeground());
      setBackground(UIManager.getColor("Button.background"));
          }
        }catch(Exception e){e.printStackTrace();}
    }
      
    setText((value == null) ? "" : value.toString());
    return this;
  }
}

/**
 * @version 1.0 11/09/98
 */

class ButtonEditor extends DefaultCellEditor {
    
     
    
    
    
    String email;
    
    public void setemail(String Email){
        email = Email;
    }
    public String getemail(){
        return email;
    }  
    
  protected JButton button;

  private String label;

  private boolean isPushed;

  public ButtonEditor(JCheckBox checkBox,String email) {
      
    super(checkBox);
    
    setemail(email);
    button = new JButton();
    button.setOpaque(true);
    
    button.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        fireEditingStopped();
      }
    });
  }

  public Component getTableCellEditorComponent(JTable table, Object value,
      boolean isSelected, int row, int column) {
      
    if (isSelected) {
      button.setForeground(table.getSelectionForeground());
      button.setBackground(table.getSelectionBackground());
    } else {
        
        
      button.setForeground(table.getForeground());
      button.setBackground(table.getBackground());
    }
    label = (value == null) ? "" : value.toString();
    button.setText(label);
    
    isPushed = true;
    return button;
  }

  public Object getCellEditorValue() {
    if (isPushed) {
      // 
      // 
//      new scoreMain(label).setVisible(true);
        
        new scoreMain(label,1,getemail());
//      JOptionPane.showMessageDialog(button, label + ": Ouch!");
      // System.out.println(label + ": Ouch!");
    }
    isPushed = false;
    return new String(label);
  }

  public boolean stopCellEditing() {
    isPushed = false;
    return super.stopCellEditing();
  }

  protected void fireEditingStopped() {
    super.fireEditingStopped();
  }
}

